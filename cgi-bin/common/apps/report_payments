#!/usr/bin/perl
#######################################################################
#######################################################################
#######################################################################

#use strict;
#use Perl::Critic;
use DBI;
use DBIx::Connector;
use DBD::mysql;
use Cwd;

local ($dir) = getcwd;
local ($in{'e'}) = 4;



chdir($dir);

# Required Libraries
# --------------------------------------------------------
eval {
	require ('../subs/auth.cgi');
	require ('../subs/sub.base.html.cgi');
	require ('../subs/sub.func.html.cgi');
};

if ($@) { &cgierr ("Error loading required Libraries",300,$@); }

eval { &main; };
if ($@) { &cgierr("Fatal error,301,$@"); }

exit;


sub main {
#################################################################
#################################################################

	$|++;
	&connect_db;
	&generate_report;
	&disconnect_db;

}

sub generate_report {
#############################################################################
#############################################################################
	# cgierr('HOLA');
	# print "Content-type: text/html\n\n";
	# print 'HOLA';
	use Data::Dumper;
	
	my ($sth) = &Do_SQL("select *
						from sl_orders_plogs
						join sl_orders on sl_orders.ID_orders=sl_orders_plogs.ID_orders
						where year(sl_orders.Date)>=2017");
	my $res='';
	my $out='Date,OrderId,Number,NumberOfPayments,CardType,CreditDebit,Cvv2Resp,CcErrCode'."\n";
	while ($rec = $sth->fetchrow_hashref){				
		$OrderId=get_specific_data('OrderId',$rec->{'Data'});
		$Number=get_specific_data('Number',$rec->{'Data'});
		$NumberOfPayments=get_specific_data('NumberOfPayments',$rec->{'Data'});
		$CardType=get_specific_data('CardType',$rec->{'Data'});
		$CreditDebit=get_specific_data('CreditDebit',$rec->{'Data'});	
		$Cvv2Resp=get_specific_data('Cvv2Resp',$rec->{'Data'});	
		$CcErrCode=get_specific_data('CcErrCode',$rec->{'Data'});	
		if($OrderId!="Not found"){
			$out.=$rec->{'Date'}.','.$OrderId.','.$Number.','.$NumberOfPayments.','.$CardType.','.$CreditDebit.','.$Cvv2Resp.','.$CcErrCode."\n";
		}
	}
	## GENERAR CSV
	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
	my $fname   = $year.$mon.$day.'_Payment_report.csv';
	$fname =~ s/\s/_/g;

	if (open (my $cfg, ">", $fname)){
		print $cfg $out;

		print "\nEl archivo se genero corectamente en $dir/$fname\n";
		
		$nowwww = localtime();
		print "\nFinalizado : $nowwww\n\n";

	}else{
		return "error no se pudo generar el archivo $fname\n";
	}


	print $out;
}

sub get_specific_data{
	my ($text,$data) = @_;
	my @line = split /\n/, $data;
	foreach $elem (@line) {        
		if (index(lc($elem), lc($text)) != -1) {		    
			my @param = split /=/, $elem;									
			return $param[1];
		} 
    }
    return "Not found";
}



##################################################################
#     CGIERR   	#
##################################################################
sub cgierr {
# --------------------------------------------------------
# Last Modified on: 11/10/08 12:00:31
# Last Modified by: MCC C. Gabriel Varela S: Se corrige que se muestre la fecha de forma correcta
	my (@sys_err) = @_;
	print "Content-type: text/html\n\n";

	my ($key,$env,$out_in,$out_env);
	if (!$cfg{'cd'}){
		print qq|
					<head>
									<title>CGI - ERROR</title>
					</head>					
					<body BGCOLOR="#FFFFFF" LINK="#FF0000" VLINK="#FF0000" ALINK="#FF0000">
					
									<table BORDER="0" WIDTH="500" CELLPADDING="10" CELLSPACING="10">
									  <tr>
									    <td BGCOLOR="#FF0000" colspan="2"><font size="5" color="#FFFFFF" face="Arial"><b>CGI-Error</b></font></td>
									  </tr>
									</table>
									<table BORDER="0" WIDTH="550" CELLPADDING="2" CELLSPACING="0">|;
										$sys_err[0]	and print "\n<tr>\n  <td valign='top' width='200'><font face='Arial' size='3'>Error Message</font></td>\n  <td><font face='Arial' size='3' color='#FF0000'><b>$sys_err[0]</b></font></td>\n</tr>\n";
										$sys_err[1]	and print "<tr>\n  <td width='200'><font face='Arial' size='2'>Error Code</font></td>\n  <td><font face='Arial' size='2'>$sys_err[1]</font></td>\n";
										$sys_err[2]	and print "<tr>\n  <td valign='top' width='200'><font face='Arial' size='2'>System Message</font></td>\n  <td><font face='Arial' size='2'>$sys_err[2]</font></td>\n";
										print qq|
									<tr>
									  <td colspan="2"><p>&nbsp</p><font face='Arial' size='2'>If the problem percist, please contact us with the above Information.</font><br>
											<font face='Arial' size='2'><a href="mailto:$systememail">$systememail</a></font></td>
									</tr>
									  </table>
					</body>
					</html>|;
		######################################
		### Save CGI ERR			
		##############################
		my ($ip);
		my (@outmsg) = @sys_err;
		my ($sec, $min, $hour, $day, $mon, $year, $dweek, $dyear, $daylight) = localtime(time());
		$year+=1900;
		$mon++;
		my ($time,$date) = ("$hour:$min:$sec","$mon-$day-$year");
		
		foreach $key (sort keys %in) {
			$outmsg[3] .= "$key=$in{$key},";
		}
		
		foreach $env (sort keys %ENV) {
			$outmsg[4] .= "$env=$ENV{$env},";
		}
		
		for (0..4){
			$outmsg[$_] =~ s/\n|\r/ /g;
			$outmsg[$_] =~ s/\|/ /g;
		}
		
		if ($ENV{'REMOTE_ADDR'}){
			$ip = $ENV{'REMOTE_ADDR'};
		}elsif ($ENV{'REMOTE_HOST'}){
			$ip = $ENV{'REMOTE_HOST'};
		}elsif ($ENV{'HTTP_CLIENT_IP'}){
			$ip = $ENV{'HTTP_CLIENT_IP'};
		}else{
			$ip = "Unknow";
		}
		(!$cfg{'cgierr_log_file'}) and ($cfg{'cgierr_log_file'} = './logs/cgierr.log');
		if (open (LOG, ">>$cfg{'cgierr_log_file'}")){;
			print LOG "$usr{'username'}|$outmsg[0]|$outmsg[1]|$outmsg[2]|$outmsg[3]|$outmsg[4]|$time|$date|$ip\n";
			close AUTH;
		}
	

	}else{
		print "<PRE>\n\nCGI ERROR\n==========================================\n";
					$sys_err[0]	and print "Error Message       : $sys_err[0]\n";
					$sys_err[1]	and print "Error Code          : $sys_err[1]\n";
					$sys_err[2]	and print "System Message      : $sys_err[2]\n";
					$0			and print "Script Location     : $0\n";
					$]			and print "Perl Version        : $]\n";
					$sid		and print "Session ID          : $sid\n";


		print "\nForm Variables IN\n-------------------------------------------\n";
		
		foreach $key (sort keys %in) {
			my $space = " " x (20 - length($key));
			$out_in .= "$key=$in{$key},";
			print "$key$space: $in{$key}\n";
		}
		
		print "\nForm Variables ERROR\n-------------------------------------------\n";
		foreach $key (sort keys %error) {
			my $space = " " x (20 - length($key));
			print "$key$space: $error{$key}\n";
		}
		
		print "\nEnvironment Variables\n-------------------------------------------\n";
		foreach $env (sort keys %ENV) {
			my $space = " " x (20 - length($env));
			$out_env .= "$env=$ENV{$env},";
			print "$env$space: $ENV{$env}\n";
		}
		
		print "\n</PRE>";

	}

	exit -1;
}


