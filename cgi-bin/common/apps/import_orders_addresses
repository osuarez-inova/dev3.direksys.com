#!/usr/bin/perl
#######################################################################
#######################################################################
#######################################################################
use DBI;
use DBIx::Connector;
use DBD::mysql;

# Load the form information and set the config file and userid.
local(%in) = &parse_form;
local(%config, %cfg, %usr);

# Required Libraries
# --------------------------------------------------------
eval {
	require ("../subs/auth.cgi");
	require ("../subs/sub.base.html.cgi");
};

if ($@) { &cgierr ("Error loading required Libraries",300,$@); }

eval { &main; };
if ($@) { &cgierr("Fatal error, 301, $@"); }

exit;

sub main {	
	$|++;
	print "Content-type: text/html\n\n";

	# aplico la 3 porque este proceso fue dise√±ado para MUFAR
	$in{'e'} = 3;
	
	&load_settings;

	$sys{'fmt_curr_decimal_digits'} = 2 if(!$sys{'fmt_curr_decimal_digits'});

	print "<h4>DIREKSYS($in{'e'}) - CARGA MASIVA DE ORDENES DE VENTA</h5>";
	my $email_text = 'Cargado masivo de Ordenes -- '.localtime."\n";

	# Numero de orden de cliente
	if (!$in{'no'}){
		print "<span style='color:red;'>NO SE ENVIO EL NO DE ORDEN DE COMPRA DEL CLIENTE.</span><br>";
	}else{

		&connect_db;
		# paso 1 - revisar si en el folder configurado existen los 2 archivos y podrian ser del tipo csv | xls | xlsx
		# consultar con robert este detalle
		$dir = $cfg{'path_sanborns_layouts'};
		$id_customer = 100105;# ----------------------------------------------->customer ID - SANBORNS

		if(-e $dir and $in{'no'}) {

			# cambiar a nombre archivo dinamico
			$file2 = 'detalle_vs_addresses_'.$in{'no'}.'.csv';
			$dir2 = $dir.$file2;

			if(-r $dir2) {
				# print "abriendo: ".$dir1." <br>";

				my $OC_SANBORNS;

				my ($string) = '';
				if($in{'process'} eq 'analyze'){
					print "Analisis completo.<br>";

					return;
				}elsif($in{'process'} eq 'commit'){

					print "abriendo: ".$dir2." <br>";
					
					# lee archivo 2
					my ($registers2) = 0;
					my ($bugs)=0;
					my (@office_key, @office_desc,);
					if(-r $dir2 and open (FILE, $dir2)) {		
						while ($record = <FILE>) {
							chomp $record;
							$registers2++;

							my @fields = split "," , $record;

							# limpiando campo de caracteres de formato
							
							my @fields2 = split "-" , $fields[0];

							$office_key[$registers2] = $fields2[0];
							$office_desc[$registers2] = $fields2[1];
							

							$customer_code = $office_key[$registers2];
							$customer_alias = $office_desc[$registers2];

							my $id_orders = $fields[1];
							my $OC_SANBORNS = $fields[2];

							if ($OC_SANBORNS != $in{'no'}){
								print "<span style='color:red;'>EL NO DE ORDEN DE COMPRA NO COINCIDE CON LA INFORMACION DEL ARCHIVO.</span><br>";				
								return;
							}

							#podriamos poner en la nota el nombre del archivo del que se obtuvo la informacion
							# $orders_notes = 'Esta Orden fue creada por procesamiento de Carga Masiva de Direksys.';

							# por cada registro(tienda) se crea una orden
							# hasta  esta parte ya debo conocer el id del cliente y sus respectivos datos
							# voy a ir a buscar su ultima compra y me voy a traer sus datos

							my ($sth_order_origin) = &Do_SQL("SELECT * FROM sl_orders WHERE ID_orders = '$id_orders' LIMIT 1;");
							$rec_order_origin = $sth_order_origin->fetchrow_hashref;


							# datos del envio de la tienda correspondiente
							
							# revisar si el cliente existe
							# si existe entonces crea la orden con sus datos
							if (int($rec_order_origin->{'ID_customers_addresses'})==0) {
								$bugs++;
								print "<br>ORDEN CON DIRECCION ERRONEA <strong>$id_orders</strong>. ".$rec_order_origin->{'ID_customers_addresses'}."<br>";
								
								my ($sth_customer_shpaddress) = &Do_SQL("SELECT * FROM cu_customers_addresses WHERE ID_customers=$id_customer AND Alias like ('%$customer_code%$customer_alias%') LIMIT 1;");
								my $rec_customershpaddress = $sth_customer_shpaddress->fetchrow_hashref;
								
								if ($rec_customershpaddress->{'ID_customers_addresses'}) {

									$sth_order = &Do_SQL("UPDATE sl_orders SET
										ID_customers_addresses = '".$rec_customershpaddress->{'ID_customers_addresses'}."'
										,  Address1='".$rec_customershpaddress->{'Address1'}."'
										,  Address2='".$rec_customershpaddress->{'Address2'}."'
										,  Address3='".$rec_customershpaddress->{'Address3'}."'
										,  Urbanization='".$rec_customershpaddress->{'Urbanization'}."'
										,  City='".$rec_customershpaddress->{'City'}."'
										,  State='".$rec_customershpaddress->{'State'}."'
										,  Zip='".$rec_customershpaddress->{'Zip'}."'
										,  Country='".$rec_customershpaddress->{'Country'}."'
										,  shp_Address1='".$rec_customershpaddress->{'Address1'}."'
										,  shp_Address2='".$rec_customershpaddress->{'Address2'}."'
										,  shp_Address3='".$rec_customershpaddress->{'Address3'}."'
										,  shp_Urbanization='".$rec_customershpaddress->{'Urbanization'}."'
										,  shp_City='".$rec_customershpaddress->{'City'}."'
										,  shp_State='".$rec_customershpaddress->{'State'}."'
										,  shp_Zip='".$rec_customershpaddress->{'Zip'}."'
										,  shp_Country='".$rec_customershpaddress->{'Country'}."'

										WHERE 1 
										AND ID_orders='".$id_orders."' ");
									
									print "SE ACTUALIZA DIRECCION DE ENVIO A ORDEN <strong>$id_orders</strong> NUEVA: ".$rec_customershpaddress->{'ID_customers_addresses'}.".<br>";

								}else {
									print "DIRECCION DEL CLIENTE <strong>$customer_code - $customer_alias</strong> NO FUE ENCONTRADO EN EL SISTEMA.<br>";

								}
							}else{
								# print "<br>LA ORDEN <strong>$id_orders</strong> NO FUE ENCONTRADO EN EL SISTEMA.<br>";
							}
					
						}
						print "SE DETECTARON $bugs ORDENES CON PROBLEMA DE DIRECCIONES<br>";

						if($registers2 > 0) {
							print "$registers2 records found in dir2";
							$email_text .= "$registers2 records found in dir2.\n";

						}else {
							print "no records found in dir2";
						}

						close FILE;
					}else{
						print "<span style='color:red;'>$dir2 no encontrado </span><br>";
					}
	  				
	  				&send_text_mail($cfg{'from_email'},'adiaz@inovaus.com',"Resumen de Carga masiva de ordenes.", $email_text);
					print "Commit procesado.<br>";

				}

			}else{
				print "<span style='color:red;'>ERROR AL LEER LOS ARCHIVOS FUENTE <strong>$file1</strong> y <strong>$file2</strong>.</span><br>";
				print "$dir1<br>";
				print "$dir2<br>";
			}
		 
		}else{
			print "<span style='color:red;'>dir '$dir' not found </span><br>";
			$email_text .= "El archivo '$dir' no fue encontrado.\n";

		}

		&disconnect_db;

	}
}

#########################################################
##			Query				##
##########################################################
sub parse_form {
# --------------------------------------------------------
	my (@pairs, %in);
	my ($buffer, $pair, $name, $value);

	if ($ENV{'REQUEST_METHOD'} eq 'GET') {
		@pairs = split(/&/, $ENV{'QUERY_STRING'});
	}elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
		read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
 		@pairs = split(/&/, $buffer);
	}else {
		&cgierr ("This script must be called from the Web\nusing either GET or POST requests\n\n");
	}
	PAIR: foreach $pair (@pairs) {
		($name, $value) = split(/=/, $pair);

		$name =~ tr/+/ /;
		$name =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		$name = lc($name);

		$value =~ tr/+/ /;
		$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

		$value =~ s/^\s+//g;
		$value =~ s/\s+$//g;

		#$value =~ s/\r//g;
		$value =~ s/<!--(.|\n)*-->//g;			# Remove SSI.
		if ($value eq "---") { next PAIR; }		# This is used as a default choice for select lists and is ignored.
		(exists $in{$name}) ?
			($in{$name} .= "|$value") :		# If we have multiple select, then we tack on
			($in{$name}  = $value);			# using the ~~ as a seperator.
	}
	return %in;
}

##################################################################
#     CGIERR   	#
##################################################################
sub cgierr {
# --------------------------------------------------------
# Last Modified on: 11/10/08 11:58:21
# Last Modified by: MCC C. Gabriel Varela S: Se corrige la forma de mostrar la fecha
	my (@sys_err) = @_;
	print "Content-type: text/html\n\n";

	my ($key,$env,$out_in,$out_env);
	if (!$cfg{'cd'}){
		print qq|
						<head>
										<title>CGI - ERROR</title>
						</head>					
						<body BGCOLOR="#FFFFFF" LINK="#FF0000" VLINK="#FF0000" ALINK="#FF0000">
					
							<table BORDER="0" WIDTH="500" CELLPADDING="10" CELLSPACING="10">
							  <tr>
							    <td BGCOLOR="#FF0000" colspan="2"><font size="5" color="#FFFFFF" face="Arial"><b>CGI-Error</b></font></td>
							  </tr>
							</table>
							<table BORDER="0" WIDTH="550" CELLPADDING="2" CELLSPACING="0">|;
								$sys_err[0]	and print "\n<tr>\n  <td valign='top' width='200'><font face='Arial' size='3'>Error Message</font></td>\n  <td><font face='Arial' size='3' color='#FF0000'><b>$sys_err[0]</b></font></td>\n</tr>\n";
								$sys_err[1]	and print "<tr>\n  <td width='200'><font face='Arial' size='2'>Error Code</font></td>\n  <td><font face='Arial' size='2'>$sys_err[1]</font></td>\n";
								$sys_err[2]	and print "<tr>\n  <td valign='top' width='200'><font face='Arial' size='2'>System Message</font></td>\n  <td><font face='Arial' size='2'>$sys_err[2]</font></td>\n";
								print qq|
							<tr>
							  <td colspan="2"><p>&nbsp</p><font face='Arial' size='2'>If the problem percist, please contact us with the above Information.</font><br>
									<font face='Arial' size='2'><a href="mailto:$systememail">$systememail</a></font></td>
							</tr>
							  </table>
						</body>
						</html>|;
		######################################
		### Save CGI ERR			
		##############################
		my ($ip);
		my (@outmsg) = @sys_err;
		my ($sec, $min, $hour, $day, $mon, $year, $dweek, $dyear, $daylight) = localtime(time());
		$year+=1900;
		$mon++;
		my ($time,$date) = ("$hour:$min:$sec","$mon-$day-$year");
		
		foreach $key (sort keys %in) {
			$outmsg[3] .= "$key=$in{$key},";
		}
		
		foreach $env (sort keys %ENV) {
			$outmsg[4] .= "$env=$ENV{$env},";
		}
		
		for (0..4){
			$outmsg[$_] =~ s/\n|\r/ /g;
			$outmsg[$_] =~ s/\|/ /g;
		}
		
		if ($ENV{'REMOTE_ADDR'}){
			$ip = $ENV{'REMOTE_ADDR'};
		}elsif ($ENV{'REMOTE_HOST'}){
			$ip = $ENV{'REMOTE_HOST'};
		}elsif ($ENV{'HTTP_CLIENT_IP'}){
			$ip = $ENV{'HTTP_CLIENT_IP'};
		}else{
			$ip = "Unknow";
		}
	
		(!$cfg{'cgierr_log_file'}) and ($cfg{'cgierr_log_file'} = './logs/cgierr.log');
		if (open (LOG, ">>$cfg{'cgierr_log_file'}")){;
			print LOG "$usr{'username'}|$outmsg[0]|$outmsg[1]|$outmsg[2]|$outmsg[3]|$outmsg[4]|$time|$date|$ip\n";
			close AUTH;
		}
	

	}else{
		print "<PRE>\n\nCGI ERROR\n==========================================\n";
					$sys_err[0]	and print "Error Message       : $sys_err[0]\n";
					$sys_err[1]	and print "Error Code          : $sys_err[1]\n";
					$sys_err[2]	and print "System Message      : $sys_err[2]\n";
					$0			and print "Script Location     : $0\n";
					$]			and print "Perl Version        : $]\n";
					$sid		and print "Session ID          : $sid\n";


		print "\nForm Variables IN\n-------------------------------------------\n";
		
		foreach $key (sort keys %in) {
			my $space = " " x (20 - length($key));
			$out_in .= "$key=$in{$key},";
			print "$key$space: $in{$key}\n";
		}
		
		print "\nForm Variables ERROR\n-------------------------------------------\n";
		foreach $key (sort keys %error) {
			my $space = " " x (20 - length($key));
			print "$key$space: $error{$key}\n";
		}
		
		print "\nEnvironment Variables\n-------------------------------------------\n";
		foreach $env (sort keys %ENV) {
			my $space = " " x (20 - length($env));
			$out_env .= "$env=$ENV{$env},";
			print "$env$space: $ENV{$env}\n";
		}
		
		print "\n</PRE>";

	}

	exit -1;
}

sub load_settings {
	my ($fname);
	
	if ($in{'e'}) {
		$fname = "../general.e".$in{'e'}.".cfg";
	}else {
		$fname = "../general.ex.cfg";
	}

	## general
	open (CFG, "<$fname") or &cgierr ("Unable to open: $fname,160,$!");
	LINE: while (<CFG>) {
		(/^#/)      and next LINE;
		(/^\s*$/)   and next LINE;
		$line = $_;
		$line =~ s/\n|\r//g;
		my ($td,$name,$value) = split (/\||\=/, $line,3);
		if ($td eq "conf") {
			$cfg{$name} = $value;
			next LINE;
		}elsif ($td eq "sys"){
			$sys{$name} = $value;
			next LINE;
		}
	}
	close CFG;

}

sub check_ip {
# --------------------------------------------------------
	my ($ip, $ipfilter) = @_;
	
	my (@ip) = split(/\./,$ip,4);
	my (@allowip) = split(/\,/,$ipfilter,4);
	
	for my $i(0..$#allowip){
		$allowip[$i] =~ s/\n|\r//g;
		$ok = 1;
		my (@ipfilter) = split(/\./,$allowip[$i],4);
		for my $x(0..3){
			if ($ip[$x] ne $ipfilter[$x] and $ipfilter[$x] ne 'x'){
				$ok = 0;
			}
		}
	}
	return $ok;
}


1;